{"ast":null,"code":"var _jsxFileName = \"/Users/johnbagdonas/Development/Hangman/client/src/components/GameOver.js\",\n    _s = $RefreshSig$();\n\nimport \"./GameOver.css\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GameOver(_ref) {\n  _s();\n\n  let {\n    score,\n    resetGame,\n    gameOver\n  } = _ref;\n  const [name, setName] = useState(\"\");\n  const [initGame, setInitGame] = useState(true);\n  const [scoreSaved, setScoreSaved] = useState(false);\n  const [saveError, setSaveError] = useState(false);\n\n  const postScore = async () => {\n    const data = {\n      name: name,\n      score: score\n    };\n    const response = await fetch('http://localhost:5000/addScore', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n\n    if (response.status === 200) {\n      setScoreSaved(true);\n    } else {\n      setSaveError(true);\n    }\n  };\n\n  const handleChange = event => {\n    setName(event.target.value);\n  };\n\n  const handleStartGame = () => {\n    resetGame();\n    setInitGame(false);\n  };\n\n  const handlePlayAgain = () => {\n    resetGame();\n    setScoreSaved(false);\n    setSaveError(false);\n    setName(\"\");\n  };\n\n  if (initGame) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameInit\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Welcome to WordMan 3000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Guess the correct word to up your score\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"There are 350,000 possible words. Good Luck!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStartGame,\n          children: \"Start Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"View Leaderboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameOverAlert\",\n        style: {\n          display: gameOver ? \"block\" : \"none\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Game Over!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Score \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), scoreSaved && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Score added to leaderboard!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 28\n        }, this), !scoreSaved && saveError && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"There was an error saving you score.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 42\n        }, this), !scoreSaved && /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleChange,\n          placeholder: \"username\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 29\n        }, this), !scoreSaved && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: postScore,\n          children: \"Add to leaderboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePlayAgain,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\n\n_s(GameOver, \"xjGpbgrNjlIY2fPTfTe8YxyakQk=\");\n\n_c = GameOver;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameOver\");","map":{"version":3,"sources":["/Users/johnbagdonas/Development/Hangman/client/src/components/GameOver.js"],"names":["useState","GameOver","score","resetGame","gameOver","name","setName","initGame","setInitGame","scoreSaved","setScoreSaved","saveError","setSaveError","postScore","data","response","fetch","method","headers","body","JSON","stringify","status","handleChange","event","target","value","handleStartGame","handlePlayAgain","display"],"mappings":"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","sourcesContent":["import \"./GameOver.css\"\nimport { useState } from \"react\"\n\n\nexport default function GameOver ({ score, resetGame, gameOver}) {\n\n  const [name, setName] = useState(\"\")\n  const [initGame, setInitGame] = useState(true)\n  const [scoreSaved, setScoreSaved] = useState(false)\n  const [saveError, setSaveError] = useState(false)\n\n  const postScore = async () => {\n    const data = {\n      name : name,\n      score : score\n    }\n  \n    const response = await fetch('http://localhost:5000/addScore', {\n      method : 'POST',\n      headers : {\n        'Content-Type' : 'application/json'\n      },\n      body : JSON.stringify(data)\n    })\n    \n    if(response.status === 200){\n      setScoreSaved(true)\n    } else {\n      setSaveError(true)\n    }\n  }\n\n  const handleChange = (event) => {\n    setName(event.target.value)\n  }\n\n  const handleStartGame = () => {\n    resetGame()\n    setInitGame(false)\n  }\n\n  const handlePlayAgain = () => {\n    resetGame()\n    setScoreSaved(false)\n    setSaveError(false)\n    setName(\"\")\n  }\n\n  if(initGame){\n    return (\n      <>\n        <div className = \"gameInit\">\n          <h2>Welcome to WordMan 3000</h2>\n          <p>Guess the correct word to up your score</p>\n          <p>There are 350,000 possible words. Good Luck!</p>\n          <button onClick={handleStartGame}>Start Game</button>\n          <button>View Leaderboard</button>\n        </div>\n      </>\n    )\n  } else {\n      return (\n        <>\n        <div className=\"gameOverAlert\" style={{display: gameOver ? \"block\" : \"none\"}}> \n            <h3>Game Over!</h3>\n            <h3>Score {score}</h3>\n            {scoreSaved && <p>Score added to leaderboard!</p>}\n            {!scoreSaved && saveError && <p>There was an error saving you score.</p>}\n            {!scoreSaved && <input onChange={handleChange} placeholder = \"username\" type = \"text\"></input>}\n            {!scoreSaved && <button onClick={postScore}>Add to leaderboard</button>}\n            <br></br>\n            <button onClick={handlePlayAgain}>Play Again</button>\n        </div> \n        </>\n      )\n  }\n\n} "]},"metadata":{},"sourceType":"module"}