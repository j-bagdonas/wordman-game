{"ast":null,"code":"var _jsxFileName = \"/Users/johnbagdonas/Development/Hangman/client/src/components/Timer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Timer(_ref) {\n  _s();\n\n  let {\n    gameOver,\n    resetGame\n  } = _ref;\n  const [timeRemaining, setTimeRemaining] = useState(5);\n  useEffect(() => {\n    if (timeRemaining > 0 && !gameOver) {\n      setTimeout(() => {\n        setTimeRemaining(prevTimeRemaining => prevTimeRemaining - 1);\n      }, 1000);\n    } else {\n      props.setGameOver(true);\n      setTimeRemaining(60);\n      resetGame;\n    }\n  }, [timeRemaining]);\n  return /*#__PURE__*/_jsxDEV(\"h4\", {\n    children: [\"Time remaining: \", timeRemaining]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Timer, \"vyJmqrsbdxkvlykNrH/wVEGUF50=\");\n\n_c = Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/johnbagdonas/Development/Hangman/client/src/components/Timer.js"],"names":["useState","useEffect","Timer","gameOver","resetGame","timeRemaining","setTimeRemaining","setTimeout","prevTimeRemaining","props","setGameOver"],"mappings":";;;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,eAAe,SAASC,KAAT,OAAyC;AAAA;;AAAA,MAAzB;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAyB;AAEpD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,CAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAK;AAGX,QAAGI,aAAa,GAAG,CAAhB,IAAqB,CAACF,QAAzB,EAAkC;AAC9BI,MAAAA,UAAU,CAAC,MAAM;AACbD,QAAAA,gBAAgB,CAACE,iBAAiB,IAAIA,iBAAiB,GAAG,CAA1C,CAAhB;AACH,OAFS,EAEP,IAFO,CAAV;AAGH,KAJD,MAIO;AACHC,MAAAA,KAAK,CAACC,WAAN,CAAkB,IAAlB;AACAJ,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACAF,MAAAA,SAAS;AACZ;AACJ,GAZQ,EAYN,CAACC,aAAD,CAZM,CAAT;AAcA,sBACI;AAAA,mCAAqBA,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GArBuBH,K;;KAAAA,K","sourcesContent":["\nimport { useState, useEffect } from \"react\"\n\nexport default function Timer ({ gameOver, resetGame }) {\n    \n    const [timeRemaining, setTimeRemaining] = useState(5)\n\n    useEffect(()=> {\n        \n\n        if(timeRemaining > 0 && !gameOver){\n            setTimeout(() => {\n                setTimeRemaining(prevTimeRemaining => prevTimeRemaining - 1)\n            }, 1000);\n        } else {\n            props.setGameOver(true)\n            setTimeRemaining(60)\n            resetGame\n        }\n    }, [timeRemaining])\n\n    return (\n        <h4>Time remaining: {timeRemaining}</h4>\n    )\n}"]},"metadata":{},"sourceType":"module"}